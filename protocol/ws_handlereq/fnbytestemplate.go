// Code generated by "genprotocol -ver=1.0 -basedir=. -prefix=ws"

package ws_handlereq

import (
	"github.com/kasworld/wasmwebsocket/protocol/ws_error"
	"github.com/kasworld/wasmwebsocket/protocol/ws_idcmd"
	"github.com/kasworld/wasmwebsocket/protocol/ws_obj"
	"github.com/kasworld/wasmwebsocket/protocol/ws_packet"
)

//* bytes base fn map api template , unmarshal in api

var DemuxReq2BytesAPIFnMap = [...]func(
	me interface{}, hd ws_packet.Header, rbody []byte) (
	ws_packet.Header, interface{}, error){
	ws_idcmd.InvalidCmd: bytesAPIFn_ReqInvalidCmd,
	ws_idcmd.Login:      bytesAPIFn_ReqLogin,
	ws_idcmd.Heartbeat:  bytesAPIFn_ReqHeartbeat,
	ws_idcmd.Chat:       bytesAPIFn_ReqChat,
} // DemuxReq2BytesAPIFnMap

func bytesAPIFn_ReqInvalidCmd(
	me interface{}, hd ws_packet.Header, rbody []byte) (
	ws_packet.Header, interface{}, error) {
	// robj, err := ws_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*ws_obj.ReqInvalidCmd_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := ws_packet.Header{
		ErrorCode: ws_error.None,
	}
	sendBody := &ws_obj.RspInvalidCmd_data{}
	return sendHeader, sendBody, nil
}

func bytesAPIFn_ReqLogin(
	me interface{}, hd ws_packet.Header, rbody []byte) (
	ws_packet.Header, interface{}, error) {
	// robj, err := ws_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*ws_obj.ReqLogin_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := ws_packet.Header{
		ErrorCode: ws_error.None,
	}
	sendBody := &ws_obj.RspLogin_data{}
	return sendHeader, sendBody, nil
}

func bytesAPIFn_ReqHeartbeat(
	me interface{}, hd ws_packet.Header, rbody []byte) (
	ws_packet.Header, interface{}, error) {
	// robj, err := ws_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*ws_obj.ReqHeartbeat_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := ws_packet.Header{
		ErrorCode: ws_error.None,
	}
	sendBody := &ws_obj.RspHeartbeat_data{}
	return sendHeader, sendBody, nil
}

func bytesAPIFn_ReqChat(
	me interface{}, hd ws_packet.Header, rbody []byte) (
	ws_packet.Header, interface{}, error) {
	// robj, err := ws_json.UnmarshalPacket(hd, rbody)
	// if err != nil {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", rbody)
	// }
	// recvBody, ok := robj.(*ws_obj.ReqChat_data)
	// if !ok {
	// 	return hd, nil, fmt.Errorf("Packet type miss match %v", robj)
	// }
	// _ = recvBody

	sendHeader := ws_packet.Header{
		ErrorCode: ws_error.None,
	}
	sendBody := &ws_obj.RspChat_data{}
	return sendHeader, sendBody, nil
}

//*/
